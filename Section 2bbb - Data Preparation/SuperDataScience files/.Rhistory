# <put your code here>
FreeThrowAttempts <- rbind(KobeBryant_FTA, JoeJohnson_FTA,
LeBronJames_FTA, CarmeloAnthony_FTA,
DwightHoward_FTA, ChrisBosh_FTA,
ChrisPaul_FTA, KevinDurant_FTA,
DerrickRose_FTA, DwayneWade_FTA)
rm(KobeBryant_FTA, JoeJohnson_FTA,
LeBronJames_FTA, CarmeloAnthony_FTA,
DwightHoward_FTA, ChrisBosh_FTA,
ChrisPaul_FTA, KevinDurant_FTA,
DerrickRose_FTA, DwayneWade_FTA)
colnames(FreeThrowAttempts) <- Seasons
rownames(FreeThrowAttempts) <- Players
#Dear Student,
#
#Welcome to the world of Basketball Data!
#I'm sure you will enjoy this section of the R Programming course.
#
#Instructions for this dataset:
# Simply select ALL the lines in this script by pressing
# CTRL+A on Windows or CMND+A on a Mac and execute them
# Once you have executed the commands the following objects
# will be created:
# Matrices:
# - FieldGoalAttempts
# - FieldGoals
# - Games
# - MinutesPlayed
# - Salary
# Vectors:
# - Players
# - Seasons
#We will go understand these inside the course.
#
#Sincerely,
#Kirill Eremenko
#www.superdatascience.com
#Copyright: These datasets were prepared using publicly available data.
#           However, theses scripts are subject to Copyright Laws.
#           If you wish to use these R scripts outside of the R Programming Course
#           by Kirill Eremenko, you may do so by referencing www.superdatascience.com in your work.
#Comments:
#Seasons are labeled based on the first year in the season
#E.g. the 2012-2013 season is preseneted as simply 2012
#Notes and Corrections to the data:
#Kevin Durant: 2006 - College Data Used
#Kevin Durant: 2005 - Proxied With 2006 Data
#Derrick Rose: 2012 - Did Not Play
#Derrick Rose: 2007 - College Data Used
#Derrick Rose: 2006 - Proxied With 2007 Data
#Derrick Rose: 2005 - Proxied With 2007 Data
#Seasons
Seasons <- c("2005","2006","2007","2008","2009","2010","2011","2012","2013","2014")
#Players
Players <- c("KobeBryant","JoeJohnson","LeBronJames","CarmeloAnthony","DwightHoward","ChrisBosh","ChrisPaul","KevinDurant","DerrickRose","DwayneWade")
#Salaries
KobeBryant_Salary <- c(15946875,17718750,19490625,21262500,23034375,24806250,25244493,27849149,30453805,23500000)
JoeJohnson_Salary <- c(12000000,12744189,13488377,14232567,14976754,16324500,18038573,19752645,21466718,23180790)
LeBronJames_Salary <- c(4621800,5828090,13041250,14410581,15779912,14500000,16022500,17545000,19067500,20644400)
CarmeloAnthony_Salary <- c(3713640,4694041,13041250,14410581,15779912,17149243,18518574,19450000,22407474,22458000)
DwightHoward_Salary <- c(4493160,4806720,6061274,13758000,15202590,16647180,18091770,19536360,20513178,21436271)
ChrisBosh_Salary <- c(3348000,4235220,12455000,14410581,15779912,14500000,16022500,17545000,19067500,20644400)
ChrisPaul_Salary <- c(3144240,3380160,3615960,4574189,13520500,14940153,16359805,17779458,18668431,20068563)
KevinDurant_Salary <- c(0,0,4171200,4484040,4796880,6053663,15506632,16669630,17832627,18995624)
DerrickRose_Salary <- c(0,0,0,4822800,5184480,5546160,6993708,16402500,17632688,18862875)
DwayneWade_Salary <- c(3031920,3841443,13041250,14410581,15779912,14200000,15691000,17182000,18673000,15000000)
#Matrix
Salary <- rbind(KobeBryant_Salary, JoeJohnson_Salary, LeBronJames_Salary, CarmeloAnthony_Salary, DwightHoward_Salary, ChrisBosh_Salary, ChrisPaul_Salary, KevinDurant_Salary, DerrickRose_Salary, DwayneWade_Salary)
rm(KobeBryant_Salary, JoeJohnson_Salary, CarmeloAnthony_Salary, DwightHoward_Salary, ChrisBosh_Salary, LeBronJames_Salary, ChrisPaul_Salary, DerrickRose_Salary, DwayneWade_Salary, KevinDurant_Salary)
colnames(Salary) <- Seasons
rownames(Salary) <- Players
#Games
KobeBryant_G <- c(80,77,82,82,73,82,58,78,6,35)
JoeJohnson_G <- c(82,57,82,79,76,72,60,72,79,80)
LeBronJames_G <- c(79,78,75,81,76,79,62,76,77,69)
CarmeloAnthony_G <- c(80,65,77,66,69,77,55,67,77,40)
DwightHoward_G <- c(82,82,82,79,82,78,54,76,71,41)
ChrisBosh_G <- c(70,69,67,77,70,77,57,74,79,44)
ChrisPaul_G <- c(78,64,80,78,45,80,60,70,62,82)
KevinDurant_G <- c(35,35,80,74,82,78,66,81,81,27)
DerrickRose_G <- c(40,40,40,81,78,81,39,0,10,51)
DwayneWade_G <- c(75,51,51,79,77,76,49,69,54,62)
#Matrix
Games <- rbind(KobeBryant_G, JoeJohnson_G, LeBronJames_G, CarmeloAnthony_G, DwightHoward_G, ChrisBosh_G, ChrisPaul_G, KevinDurant_G, DerrickRose_G, DwayneWade_G)
rm(KobeBryant_G, JoeJohnson_G, CarmeloAnthony_G, DwightHoward_G, ChrisBosh_G, LeBronJames_G, ChrisPaul_G, DerrickRose_G, DwayneWade_G, KevinDurant_G)
colnames(Games) <- Seasons
rownames(Games) <- Players
#Minutes Played
KobeBryant_MP <- c(3277,3140,3192,2960,2835,2779,2232,3013,177,1207)
JoeJohnson_MP <- c(3340,2359,3343,3124,2886,2554,2127,2642,2575,2791)
LeBronJames_MP <- c(3361,3190,3027,3054,2966,3063,2326,2877,2902,2493)
CarmeloAnthony_MP <- c(2941,2486,2806,2277,2634,2751,1876,2482,2982,1428)
DwightHoward_MP <- c(3021,3023,3088,2821,2843,2935,2070,2722,2396,1223)
ChrisBosh_MP <- c(2751,2658,2425,2928,2526,2795,2007,2454,2531,1556)
ChrisPaul_MP <- c(2808,2353,3006,3002,1712,2880,2181,2335,2171,2857)
KevinDurant_MP <- c(1255,1255,2768,2885,3239,3038,2546,3119,3122,913)
DerrickRose_MP <- c(1168,1168,1168,3000,2871,3026,1375,0,311,1530)
DwayneWade_MP <- c(2892,1931,1954,3048,2792,2823,1625,2391,1775,1971)
#Matrix
MinutesPlayed <- rbind(KobeBryant_MP, JoeJohnson_MP, LeBronJames_MP, CarmeloAnthony_MP, DwightHoward_MP, ChrisBosh_MP, ChrisPaul_MP, KevinDurant_MP, DerrickRose_MP, DwayneWade_MP)
rm(KobeBryant_MP, JoeJohnson_MP, CarmeloAnthony_MP, DwightHoward_MP, ChrisBosh_MP, LeBronJames_MP, ChrisPaul_MP, DerrickRose_MP, DwayneWade_MP, KevinDurant_MP)
colnames(MinutesPlayed) <- Seasons
rownames(MinutesPlayed) <- Players
#Field Goals
KobeBryant_FG <- c(978,813,775,800,716,740,574,738,31,266)
JoeJohnson_FG <- c(632,536,647,620,635,514,423,445,462,446)
LeBronJames_FG <- c(875,772,794,789,768,758,621,765,767,624)
CarmeloAnthony_FG <- c(756,691,728,535,688,684,441,669,743,358)
DwightHoward_FG <- c(468,526,583,560,510,619,416,470,473,251)
ChrisBosh_FG <- c(549,543,507,615,600,524,393,485,492,343)
ChrisPaul_FG <- c(407,381,630,631,314,430,425,412,406,568)
KevinDurant_FG <- c(306,306,587,661,794,711,643,731,849,238)
DerrickRose_FG <- c(208,208,208,574,672,711,302,0,58,338)
DwayneWade_FG <- c(699,472,439,854,719,692,416,569,415,509)
#Matrix
FieldGoals <- rbind(KobeBryant_FG, JoeJohnson_FG, LeBronJames_FG, CarmeloAnthony_FG, DwightHoward_FG, ChrisBosh_FG, ChrisPaul_FG, KevinDurant_FG, DerrickRose_FG, DwayneWade_FG)
rm(KobeBryant_FG, JoeJohnson_FG, LeBronJames_FG, CarmeloAnthony_FG, DwightHoward_FG, ChrisBosh_FG, ChrisPaul_FG, KevinDurant_FG, DerrickRose_FG, DwayneWade_FG)
colnames(FieldGoals) <- Seasons
rownames(FieldGoals) <- Players
#Field Goal Attempts
KobeBryant_FGA <- c(2173,1757,1690,1712,1569,1639,1336,1595,73,713)
JoeJohnson_FGA <- c(1395,1139,1497,1420,1386,1161,931,1052,1018,1025)
LeBronJames_FGA <- c(1823,1621,1642,1613,1528,1485,1169,1354,1353,1279)
CarmeloAnthony_FGA <- c(1572,1453,1481,1207,1502,1503,1025,1489,1643,806)
DwightHoward_FGA <- c(881,873,974,979,834,1044,726,813,800,423)
ChrisBosh_FGA <- c(1087,1094,1027,1263,1158,1056,807,907,953,745)
ChrisPaul_FGA <- c(947,871,1291,1255,637,928,890,856,870,1170)
KevinDurant_FGA <- c(647,647,1366,1390,1668,1538,1297,1433,1688,467)
DerrickRose_FGA <- c(436,436,436,1208,1373,1597,695,0,164,835)
DwayneWade_FGA <- c(1413,962,937,1739,1511,1384,837,1093,761,1084)
#Matrix
FieldGoalAttempts <- rbind(KobeBryant_FGA, JoeJohnson_FGA, LeBronJames_FGA, CarmeloAnthony_FGA, DwightHoward_FGA, ChrisBosh_FGA, ChrisPaul_FGA, KevinDurant_FGA, DerrickRose_FGA, DwayneWade_FGA)
rm(KobeBryant_FGA, JoeJohnson_FGA, LeBronJames_FGA, CarmeloAnthony_FGA, DwightHoward_FGA, ChrisBosh_FGA, ChrisPaul_FGA, KevinDurant_FGA, DerrickRose_FGA, DwayneWade_FGA)
colnames(FieldGoalAttempts) <- Seasons
rownames(FieldGoalAttempts) <- Players
#Points
KobeBryant_PTS <- c(2832,2430,2323,2201,1970,2078,1616,2133,83,782)
JoeJohnson_PTS <- c(1653,1426,1779,1688,1619,1312,1129,1170,1245,1154)
LeBronJames_PTS <- c(2478,2132,2250,2304,2258,2111,1683,2036,2089,1743)
CarmeloAnthony_PTS <- c(2122,1881,1978,1504,1943,1970,1245,1920,2112,966)
DwightHoward_PTS <- c(1292,1443,1695,1624,1503,1784,1113,1296,1297,646)
ChrisBosh_PTS <- c(1572,1561,1496,1746,1678,1438,1025,1232,1281,928)
ChrisPaul_PTS <- c(1258,1104,1684,1781,841,1268,1189,1186,1185,1564)
KevinDurant_PTS <- c(903,903,1624,1871,2472,2161,1850,2280,2593,686)
DerrickRose_PTS <- c(597,597,597,1361,1619,2026,852,0,159,904)
DwayneWade_PTS <- c(2040,1397,1254,2386,2045,1941,1082,1463,1028,1331)
#Matrix
Points <- rbind(KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS)
rm(KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS)
colnames(Points) <- Seasons
rownames(Points) <- Players
Homework: Basketball Free Throws - S4, L43
#You have been supplied data for two more additional in-game statistics:
## Free Throws
## Free Throw Attempts
#You need to create three plots that portray the following insights:
## Free Throw Attemps per game
## Accuracy of Free Throws
## Player playing style (2 vs 3 points preference) excluding Free Throws*
### Playing style = ratio of Points to FieldGoals, but you have to exclude Free Throws here
#*Each Free Throw is worth 1 point
#The data has been supplied in the form of vectors. You will have to create the two matrics before you proceed with the analysis.
#----Data----
#Seasons
Seasons <- c("2005","2006","2007","2008","2009","2010","2011","2012","2013","2014")
#Players
Players <- c("KobeBryant","JoeJohnson","LeBronJames","CarmeloAnthony","DwightHoward","ChrisBosh","ChrisPaul","KevinDurant","DerrickRose","DwayneWade")
#Free Throws
KobeBryant_FT <- c(696,667,623,483,439,483,381,525,18,196)
JoeJohnson_FT <- c(261,235,316,299,220,195,158,132,159,141)
LeBronJames_FT <- c(601,489,549,594,593,503,387,403,439,375)
CarmeloAnthony_FT <- c(573,459,464,371,508,507,295,425,459,189)
DwightHoward_FT <- c(356,390,529,504,483,546,281,355,349,143)
ChrisBosh_FT <- c(474,463,472,504,470,384,229,241,223,179)
ChrisPaul_FT <- c(394,292,332,455,161,337,260,286,295,289)
KevinDurant_FT <- c(209,209,391,452,756,594,431,679,703,146)
DerrickRose_FT <- c(146,146,146,197,259,476,194,0,27,152)
DwayneWade_FT <- c(629,432,354,590,534,494,235,308,189,284)
#Matrix
#Free Throws matrix
# <put your code here>
FreeThrows <- rbind(KobeBryant_FT, JoeJohnson_FT,
LeBronJames_FT, CarmeloAnthony_FT,
DwightHoward_FT, ChrisBosh_FT,
ChrisPaul_FT, KevinDurant_FT,
DerrickRose_FT, DwayneWade_FT)
#remove the vectors to clear up the workspace; too many things in the workspace can slow down your computer!
rm(KobeBryant_FT, JoeJohnson_FT,
LeBronJames_FT, CarmeloAnthony_FT,
DwightHoward_FT, ChrisBosh_FT,
ChrisPaul_FT, KevinDurant_FT,
DerrickRose_FT, DwayneWade_FT)
colnames(FreeThrows) <- Seasons
rownames(FreeThrows) <- Players
#Free Throw Attempts
KobeBryant_FTA <- c(819,768,742,564,541,583,451,626,21,241)
JoeJohnson_FTA <- c(330,314,379,362,269,243,186,161,195,176)
LeBronJames_FTA <- c(814,701,771,762,773,663,502,535,585,528)
CarmeloAnthony_FTA <- c(709,568,590,468,612,605,367,512,541,237)
DwightHoward_FTA <- c(598,666,897,849,816,916,572,721,638,271)
ChrisBosh_FTA <- c(581,590,559,617,590,471,279,302,272,232)
ChrisPaul_FTA <- c(465,357,390,524,190,384,302,323,345,321)
KevinDurant_FTA <- c(256,256,448,524,840,675,501,750,805,171)
DerrickRose_FTA <- c(205,205,205,250,338,555,239,0,32,187)
DwayneWade_FTA <- c(803,535,467,771,702,652,297,425,258,370)
#Matrix
#Free Throw Attempts matrix
# <put your code here>
FreeThrowAttempts <- rbind(KobeBryant_FTA, JoeJohnson_FTA,
LeBronJames_FTA, CarmeloAnthony_FTA,
DwightHoward_FTA, ChrisBosh_FTA,
ChrisPaul_FTA, KevinDurant_FTA,
DerrickRose_FTA, DwayneWade_FTA)
rm(KobeBryant_FTA, JoeJohnson_FTA,
LeBronJames_FTA, CarmeloAnthony_FTA,
DwightHoward_FTA, ChrisBosh_FTA,
ChrisPaul_FTA, KevinDurant_FTA,
DerrickRose_FTA, DwayneWade_FTA)
colnames(FreeThrowAttempts) <- Seasons
rownames(FreeThrowAttempts) <- Players
FreeThrowAttempts
myplot <- function(data, rows=1:10){
Data <- data[rows,, drop=F]     #data becomes the data file
Data
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.005, legend=Players[rows],
col=c(1:4,6), pch=15:18, horiz=F,
text.width=0.65, ncol=2, cex=0.65)
}
myplot(FreeThrowAttempts)
## Free Throw Attemps per game
myplot(FreeThrowAttempts / Games)
View(myplot)
View(myplot)
myplot <- function(z, who=1:10) {
matplot(t(z[who,,drop=F]), type="b", pch=15:18, col=c(1:4,6), main="Basketball Players Analysis")
legend("bottomleft", inset=0.01, legend=Players[who], col=c(1:4,6), pch=15:18, horiz=F)
}
myplot(FreeThrowAttempts)
(Points - FreeThrows) / FieldGoals
#3.Player playing style (2 vs 3 points preference) excluding Free Throws*
### Playing style = ratio of Points to FieldGoals, but you have to exclude Free Throws here
#*Each Free Throw is worth 1 point
PlayingStyle <- (Points - FreeThrows) / FieldGoals
myplot(PlayingStyle)
R.version.string
installr: install.packages("installr") and library(installr)
install.packages("installr") and library(installr)
install.packages("installr")
library(installr)
updateR()
#---------------- gsub() and sub() - S2, L13
?sub
head(fin)
fin$Expenses <- gsub(" Dollars","", fin$Expenses)   #replace " Dollars" with "" (nothing) in the Expenses variable
setwd("~/R Programming - Advanced Analytics in R for Data Science/Section 2 - Data Preparation/SuperDataScience files")
getwd()
#import data
fin <- read.csv("P3-Future-500-The-Dataset.csv")
head(fin)
tail(fin, 3)
str(fin)
summary(fin)
factor(fin$ID)               #make ID a factor
fin$ID <- factor(fin$ID)     #override ID in DF with newly factored ID var
summary(fin)
str(fin)
fin$Inception <- factor(fin$Inception)
summary(fin)
str(fin)
setwd("~/R Programming - Advanced Analytics in R for Data Science/Section 2 - Data Preparation/SuperDataScience files")
getwd()
#import data
fin <- read.csv("P3-Future-500-The-Dataset.csv")
head(fin)
tail(fin, 3)
str(fin)
summary(fin)
#many factors in this data set!
factor(fin$ID)               #make ID a factor
fin$ID <- factor(fin$ID)     #override ID in DF with newly factored ID var
summary(fin)
str(fin)
fin$Inception <- factor(fin$Inception)
summary(fin)
str(fin)
fin$Expenses <- gsub(" Dollars","", fin$Expenses)   #replace " Dollars" with "" (nothing) in the Expenses variable
head(fin)
save.image("~/R Programming - Advanced Analytics in R for Data Science/R_Advanced.RData")
fin$Expenses <- gsub(",","", fin$Expenses)
head(fin)
str(fin)
fin$Revenue <- gsub("$","", fin$Revenue)
head(fin)
fin$Revenue <- gsub("\\$","", fin$Revenue)
head(fin)
fin$Revenue <- gsub(",","", fin$Revenue)
head(fin)
str(fin)   #Expenses is now a character, not a factor anymore
fin$Growth <- gsub("%","", fin$Growth)
head(fin)
fin$Expenses <- as.numeric(fin$Expenses)
fin$Revenue <- as.numeric(fin$Revenue)
fin$Growth <- as.numeric(fin$Growth)
str(fin)
typeof(fin$Expenses)
summary(fin)
?NA
TRUE == FALSE
TRUE == 5
TRUE == 1
FALSE == FALSE     #true
head(fin,24)
complete.cases(fin)
#filter for only cases with missing data:
fin[!complete.cases(fin),]   #! means opposite
head(fin, 20)
#Basic data import: fin <- read.csv("P3-Future-500-The-Dataset.csv")
fin <- read.csv("P3-Future-500-The-Dataset.csv", na.strings=c(""))
head(fin, 20)
tail(fin, 3)
str(fin)
summary(fin)
#many factors in this data set!
#---------------- What are Factors? (Refresher) - S6, L10
#Factor - a categorical variable in R
#ex: Industry = factor with 8 levels
#R assigns each factor level a number
#don't want/need ID and Inception variabesl recognized as integers; change to factors
#Revenue and Expenses variables recognized as factors because they have $ and , in the data - these characters prevent R from recognizing these variables as integers
#Changing from non-factor to factor:
factor(fin$ID)               #make ID a factor
fin$ID <- factor(fin$ID)     #override ID in DF with newly factored ID var
summary(fin)
str(fin)
fin$Inception <- factor(fin$Inception)
summary(fin)
str(fin)
#---------------- The Factor Variable Trap (FVT) - S2, L11
#FVT comes into play when you're trying to change a variable from a factor to a non-factor
#Converting into Numerics for Characters:
a <- c("12", "13", "14", "12", "12")
a
typeof(a)
b <- as.numeric(a)
b
typeof(b)
#Converting into Numerics for Factors:
z <- factor(c("12", "13", "14", "12", "12"))
z
typeof(z)     #PROBLEM!!: R recognizes the factorization/levels/categories of z (1, 2, 3, 1, 1) instead of the actual numbers (12, 13, 14, 12, 12)
#wrong way:
y <- as.numeric(z)
y
typeof(y)
#--Correct way to convert factor to numeric:
#convert factor var to character, then convert character to numeric:
as.character(z)
x <- as.numeric(as.character(z))
x
typeof(x)
#---------------- FVT Example - S2, L12
head(fin)
str(fin)
#need to convert Revenue and Expenses to numeric variables
#example: let's say Profit was recognized by R as a factor (even though it's numeric)
#fin$Profit <- factor(fin$Profit)      #DANEROUS!! make Profit into a factor for this example
str(fin)
head(fin)
summary(fin)
#fin$Profit <- as.numeric(fin$Profit)  #novice method: trying to change Profit from a factor to a numeric var; doesn't work!
str(fin)                               #PROBLEM!!: R just took the levels of the factorized Profit variable and kept those levels as the new data values
head(fin)                              #now you've overriden your Profit data....which is bad!
#---------------- gsub() and sub() - S2, L13
?sub
sub()         #replaces only the first match
gsub()        #replaces ALL matches
fin$Expenses <- gsub(" Dollars","", fin$Expenses)   #replace " Dollars" with "" (nothing) in the Expenses variable
fin$Expenses <- gsub(",","", fin$Expenses)
head(fin)
str(fin)   #Expenses is now a character, not a factor anymore
fin$Revenue <- gsub("\\$","", fin$Revenue)  #because $ is a special character in R, you must use an escape sequence - in this case \\
fin$Revenue <- gsub(",","", fin$Revenue)
head(fin)
str(fin)   #Revenue is now a character, not a factor anymore
fin$Growth <- gsub("%","", fin$Growth)
#Convert from character into numeric:
#these variables were already converted into charcters by the gsub() function
fin$Expenses <- as.numeric(fin$Expenses)
fin$Revenue <- as.numeric(fin$Revenue)
fin$Growth <- as.numeric(fin$Growth)
str(fin)
summary(fin)
#---------------- Dealing With Missing Data - S2, L14
#1. Predict with 100% accuracy
#2. Leave record as is
#3. Remove record entirely
#4. Replace with mean or median (median preferred because it's less affected by outliers)
#5. Fill in by exploring correlations and similarities (use regressions or models to predict values for empty cells)
#6. Introduce dummy variable for "Missingness" (used to explore missing data)
#see "P3-Future-500-Marked-Up.xlsx" file to see what we're doing
#---------------- What is NA? - S2, L15
?NA
#logical constants:
TRUE   #1
FALSE  #0
NA
TRUE == FALSE      #false
TRUE == 5          #false
TRUE == 1          #true
FALSE == 4         #false
FALSE == FALSE     #true
FALSE == 0         #true
NA == TRUE         #NA
NA == FALSE        #NA
NA == 15           #NA
NA == NA           #NA; you can't compare a missing value to anything...because it's missing
#---------------- Locating Missing Data - S2, L16
head(fin,24)
#filter for only cases with missing data:
fin[!complete.cases(fin),]   #! means opposite; will only pick up NAs (won't pick up blank cells or <NA>)
source('~/R Programming - Advanced Analytics in R for Data Science/Section 2 - Data Preparation/Section2.R', echo=TRUE)
#fin <- read.csv("P3-Future-500-The-Dataset.csv", na.strings=c(""))
str(fin)
#---------------- Filtering: using which() for Non-Missing Data - S2, L17
head(fin)
fin$Expenses <- gsub(" Dollars","", fin$Expenses)   #replace " Dollars" with "" (nothing) in the Expenses variable
fin$Expenses <- gsub(",","", fin$Expenses)
head(fin)
str(fin)   #Expenses is now a character, not a factor anymore
fin$Revenue <- gsub("\\$","", fin$Revenue)  #because $ is a special character in R, you must use an escape sequence - in this case \\
fin$Revenue <- gsub(",","", fin$Revenue)
head(fin)
str(fin)   #Revenue is now a character, not a factor anymore
fin$Growth <- gsub("%","", fin$Growth)
#Convert from character into numeric:
#these variables were already converted into charcters by the gsub() function
fin$Expenses <- as.numeric(fin$Expenses)
fin$Revenue <- as.numeric(fin$Revenue)
fin$Growth <- as.numeric(fin$Growth)
str(fin)
summary(fin)
#Filter for only cases with missing data:
#updated import to: fin <- read.csv("P3-Future-500-The-Dataset.csv", na.strings=c(""))
fin[!complete.cases(fin),]   #! means opposite; will only pick up NAs (won't pick up blank cells or <NA>) if you do not include na.strings= in your import!
fin[fin$Revenue == 9746272,]
#---------------- Filtering: using which() for Non-Missing Data - S2, L17
head(fin)
#which() looks through your vector and only picks out true values
which(fin$Revenue == 9746272,)
#which() looks through your vector and only picks out true values; ignores NAs and FALSEs
which(fin$Revenue == 9746272)
fin[which(fin$Revenue == 9746272),]
head(fin)
fin[fin$Employees == 45,]
fin[which(fin$Employees == 45),]  #remove NAs from output
#---------------- Filtering: using is.na() for Missing Data - S2, L18
head(fin,24)
a <- c(1,24,543,NA,76,45,NA)
is.na(a)
is.na(fin$Expenses)
fin[is.na(fin$Expenses),]
fin[is.na(fin$State),]
#---------------- Removing Records with Missing Data - S2, L19
#ALWAYS make a backup!!
fin_backup <- fin
#remove rows with NAs in Industry col
fin[!complete.cases(fin),]
fin[is.na(fin$Industry),]
fin <- fin[!is.na(fin$Industry),]   #override fin with subsetted data
fin
rownames(fin)
nrow(fin)
rownames(fin) <- 1:nrow(fin)
fin
#option 2:
fin <- fin_backup
rownames(fin)
#option 2:
rownames(fin) <- NULL
fin
#---------------- Replacing Missing Data: Factual Analysis Method - S2, L21
#Factual Analysis Method = restore data with 100% certainty
fin[!complete.cases(fin),]
fin[!complete.cases(fin),]    #find all NAs
fin[is.na(fin$Industry),]
fin[!is.na(fin$Industry),]    #opposite (which rows are not NA)
#remove rows with NAs in Industry col
fin <- fin[!is.na(fin$Industry),]   #override fin with subsetted data
fin
#option 1:
rownames(fin) <- 1:nrow(fin)
#---------------- Replacing Missing Data: Factual Analysis Method - S2, L21
#Factual Analysis Method = restore data with 100% certainty
fin[!complete.cases(fin),]
#restore values in State col
fin[is.na(fin$State),]
fin[is.na(fin$State) & fin$City=="New York",]
fin[is.na(fin$State) & fin$City=="New York", "State"] <- "NY"
#check:
fin[c(11,377),]
#restore values in State col:
fin[is.na(fin$State),]   #find NAs in State col
fin[is.na(fin$State) & fin$City=="San Francisco",]
fin[is.na(fin$State) & fin$City=="San Francisco", "State"] <- "CA"
#check:
fin[c(82,265),]
#restore values in State col:
fin[is.na(fin$State),]   #find NAs in State col
#---------------- Replacing Missing Data: Factual Analysis Method - S2, L21
#Factual Analysis Method = restore data with 100% certainty
fin[!complete.cases(fin),]
